###Script to merge all datasets
###CHR: County Health Rankings
###CHSI: Community Health Status Indicators
###CHR Obtained From: http://www.countyhealthrankings.org/rankings/data
###CHSI Obtained From: https://catalog.data.gov/dataset/community-health-status-indicators-chsi-to-combat-obesity-heart-disease-and-cancer
###HCAHPS OBTAINED FROM (8/1/16): https://data.medicare.gov/Hospital-Compare/Patient-survey-HCAHPS-Hospital/dgck-syfz
###Data Obtained On: 8/16/2016
##load libraries
library(car)
library(dplyr)
library(stringr)
library(ggmap)
library(jsonlite)
library(RCurl)
##directories
dir.data.CHSI <- '/mnt/common/work/ExpX/r/data/CHSI'
dir.data.CHR <- '/mnt/common/work/ExpX/r/data/CHR'
dir.data.HCAHPS <- '/mnt/common/work/ExpX/r/data/HCAHPS'
dir.data.FIPS <- '/mnt/common/work/ExpX/r/data/Census'
dir.export <- '/mnt/common/work/ExpX/r/data/export'
##urls
url.broadband.pt1 <- 'http://www.broadbandmap.gov/broadbandmap/almanac/jun2014/rankby/state/'
url.broadband.pt2 <- '/population/downloadSpeedGreaterThan10000k/county?format=json&order=asc'
##switches
#set to true to export .csv
export.CHSI <- TRUE
export.CHR <- TRUE
export.CHSI.CSR <- TRUE
export.HCAHPS <- TRUE
##functions
#for reading in data and putting into a list
readData <- function(dir, classes=NULL) {
setwd(dir)
files <- list.files(pattern = '*.csv')
if(!is.null(classes))
data <- lapply(files, read.csv, colClasses = classes)
else
data <- lapply(files, read.csv)
names(data) <- gsub("\\.csv$", "", files) #clean up names
return(data)
}
#for exporting to csv
exportData <- function(dir, data, fileName) {
setwd(dir)
write.csv(data, file = fileName)
}
states <- c("01","02","03","04","05","06","07","08","09", 10:50)
BB.data <- lapply(states, function(x) getURL(paste(paste(url.broadband.pt1, x, sep=""), url.broadband.pt2, sep="")))  #pull data
BB.data.all <- lapply(BB.data, fromJSON)  #put into list
BB.data.all <- lapply(BB.data.all, function(x) Reduce(rbind, x[4]))  #extract dfs
BB.data.all <- bind_rows(Reduce(rbind, BB.data.all))  #row bind dfs
FIPS.lookup <- read.csv(paste(dir.data.FIPS, "/national_county.txt", sep=""),header=FALSE)
FIPS.lookup <- read.csv(paste(dir.data.FIPS, "/national_county.txt", sep="")
, header=FALSE
, colclasses=c("character", "character", "character", "character", "character"))
FIPS.lookup <- read.csv(paste(dir.data.FIPS, "/national_county.txt", sep="")
, header=FALSE
, colClasses=c("character", "character", "character", "character", "character"))
colnames(FIPS.lookup) <- c("State", "State.FIPS", "County.FIPS","County", "Donno")
View(FIPS.lookup)
test <- FIPS.lookup
View(FIPS.lookup)
test$County <- gsub(".*County", "", test$County)
View(test)
test$County <- gsub("*County", "", test$County)
test <- FIPS.lookup
test$County <- gsub("*County", "", test$County)
View(test)
FIPS.lookup$County <- gsub("*County", "", FIPS.lookup$County)
View(FIPS.lookup)
FIPS.lookup$Donno <- NULL
View(BB.data.all)
FIPS.lookup$State <- NULL
View(test)
View(FIPS.lookup)
View(BB.data.all)
FIPS.lookup <- read.csv(paste(dir.data.FIPS, "/national_county.txt", sep="")
, header=FALSE
, colClasses=c("character", "character", "character", "character", "character"))
colnames(FIPS.lookup) <- c("State", "stateFips", "County_FIPS_Code","County", "Donno")
FIPS.lookup$County <- gsub("*County", "", FIPS.lookup$County)
FIPS.lookup$Donno <- NULL
FIPS.lookup$State <- NULL
View(FIPS.lookup)
View(BB.data.all)
FIPS.lookup <- read.csv(paste(dir.data.FIPS, "/national_county.txt", sep="")
, header=FALSE
, colClasses=c("character", "character", "character", "character", "character"))
colnames(FIPS.lookup) <- c("State", "stateFips", "County_FIPS_Code","geographyName", "Donno")
FIPS.lookup$County <- gsub("*County", "", FIPS.lookup$County)
FIPS.lookup$Donno <- NULL
FIPS.lookup$State <- NULL
View(FIPS.lookup)
View(test)
View(FIPS.lookup)
FIPS.lookup <- read.csv(paste(dir.data.FIPS, "/national_county.txt", sep="")
, header=FALSE
, colClasses=c("character", "character", "character", "character", "character"))
colnames(FIPS.lookup) <- c("State", "stateFips", "County_FIPS_Code","geographyName", "Donno")
FIPS.lookup$geographyName <- gsub("*County", "", FIPS.lookup$geographyName)
FIPS.lookup$Donno <- NULL
FIPS.lookup$State <- NULL
View(test)
View(FIPS.lookup)
test <- merge(FIPS.lookup, BB.data.all)
test <- merge(FIPS.lookup, BB.data.all, by="geographyName")
test <- merge(FIPS.lookup, BB.data.all, by=c("geographyName", "stateFips"))
View(test)
View(BB.data.all)
View(FIPS.lookup)
View(BB.data.all)
View(FIPS.lookup)
test <- merge(FIPS.lookup, BB.data.all)
setwd("/mnt/common/work/PointDigFin/2/shiny")
runApp()
library(shiny)
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?event_data
?event_data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()\
runApp()
?cat
runApp()
runApp()
runApp()
runApp()
runApp()\
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd(test)
setwd("test")
runApp()
setwd("..")
setwd("...")
setwd("./")
getwd()
setwd("/mnt/common/work/PointDigFin/2/shiny")
install.packages(c("colorspace", "DBI", "evaluate", "jsonlite", "packrat", "psych", "quantreg", "R6", "Rcpp", "RcppEigen", "RgoogleMaps", "shiny", "SparseM", "stringi", "stringr", "tibble"))
getwd()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Author: Sam Turner
# Script to process IPO, Zillow, and ZIP Geometry files for analysis
# IPO Data: https://finance.yahoo.com/
# Zillow Data: http://www.zillow.com/research/data/
# Inlfation Data: http://www.usinflationcalculator.com
# ZCTA Shapefiles: https://www.census.gov/geo/maps-data/data/cbf/cbf_zcta.html
# LIBRARIES
library(dplyr)
library(xlsx)
library(zipcode)
# FUNCTIONS
readData <- function(dir, ext, classes = NULL) {
# Reads in files and puts them in a list of dataframes
#
# Args:
#   dir: Directory where files are located
#   classes: Vector of classes to be used in read.csv colClasses arg
#
# Returns:
#   A list of dataframes containing the files in dir with the .csv extension
#   removed.
setwd(dir)
files <- list.files(pattern = paste0("*.", ext))
if(ext == "csv")
data <- lapply(files, read.csv, colClasses = classes)
if(ext == "xlsx") {
data <- lapply(files, read.xlsx2
, sheetIndex = 1
, colClasses = classes
, stringsAsFactors = FALSE)
}
names(data) <- gsub("\\..*", "", files)
return(data)
}
fixCurrency <- function(df, curCol) {
# Converts curCol to numeric from currency in format $*[M,B]
#
# Args:
#   df: dataframe containing a currency column
#   curCol: name of column with currency data
#
# Returns:
# A dataframe with curCol converted to numeric
temp <- df[[curCol]]
temp <- gsub("\\$", "", temp)
temp <- gsub("M", "e6", temp)
temp <- gsub("B", "e9", temp)
df[[curCol]] <- temp
df <- as.data.frame(df, stringsAsFactors = FALSE)
return(df)
}
changeClass <- function(df, first, last, classFun) {
# Changes class of cols in range first to last in df to class
# in function classFun
#
# Args:
#   df: dataframe to change classes
#   first: first column number to change
#   last: last column number to change
#   classFun: function that changes class (as.numeric, etc...)
#
# Returns:
# A dataframe with classes in range first to last changed by classFun
temp <- df[first:last]
temp <- lapply(temp, classFun)
temp <- as.data.frame(cbind(df[-c(first:last)], temp)
, stringsAsFactors = FALSE)
return(temp)
}
# SWITCHES
linux <- TRUE # for setting directories
export <- TRUE # for exporting data to csv
# DIRECTORIES
if(linux) {
dir.data.ipo <- "/mnt/common/work/PointDigFin/2/data/ipo"
dir.data.export <- "/mnt/common/work/PointDigFin/2/data/export"
dir.data.zillow <- "/mnt/common/work/PointDigFin/2/data/zillow"
dir.data.inflation <- "/mnt/common/work/PointDigFin/2/data/inflation"
} else {
dir.data.ipo <- "D:/work/PointDigFin/2/data/ipo"
dir.data.export <- "D:/work/PointDigFin/2/data/export"
dir.data.zillow <- "D:/work/PointDigFin/2/data/zillow"
dir.data.inflation <- "D:/work/PointDigFin/2/data/inflation"
}
# IPO
data.ipo <- readData(dir.data.ipo, "xlsx", "character")
data.ipo$AMEX_companylist[13:19] <- NULL # remove empty cols
data.ipo <- lapply(data.ipo, function(df)
lapply(df, function(x)gsub("n/a", NA, x)))
data.ipo <- lapply(data.ipo, fixCurrency, "MarketCap")
data.ipo <- lapply(data.ipo, transform, MarketCap = as.numeric(MarketCap))
data.ipo <- lapply(data.ipo, function(df)
transform(df, Zip = clean.zipcodes(df$Zip)))
data.ipo <- lapply(data.ipo, select, -Summary.Quote, -State, -City)
data(zipcode)
data.ipo <- lapply(data.ipo, merge, zipcode, by.x = "Zip", by.y = "zip")
data.ipo <- lapply(data.ipo, setNames, c('ZIP', 'Symbol', 'Name', 'LastSale'
, 'MarketCap', 'Year', 'Sector'
, 'Industry', 'Address', 'City'
, 'State', 'lat', 'lon'))
data.ipo <- lapply(data.ipo, select, Year, Symbol, Name, Sector, Industry
, LastSale, MarketCap, Address, City, State
, ZIP, lat, lon)
data.ipo <- lapply(data.ipo, subset, !is.na(MarketCap))
data.ipo <- bind_rows(data.ipo)
data.ipo <- transform(data.ipo, Year = as.numeric(Year))
data.ipo <- filter(data.ipo, Year >= 1998)
# MARKET CAP
data.marketCapTot <- data.ipo %>%
group_by(Year, ZIP) %>%
summarize(Total.MarketCap = sum(MarketCap)) %>%
arrange(ZIP, Year) %>%
as.data.frame
data.marketCapTot <- lapply(unique(data.marketCapTot$ZIP), function(z)
filter(data.marketCapTot, ZIP == z)) %>%
lapply(function(df)
setNames(cbind(df, cumsum(df$Total.MarketCap))
, c(names(df), "Cum.MarketCap")))
ts.marketCapTot <- lapply(data.marketCapTot, function(df) ts(start = df[1,1], frequency = 1, df[3:4]))
names(ts.marketCapTot) <- lapply(data.marketCapTot
, function(df)return(df$ZIP[1]))
data.marketCapTot <- bind_rows(data.marketCapTot)
# INFLATION
data.inflation <- as.data.frame(readData(dir.data.inflation
, "csv", "character"))
data.inflation <- changeClass(data.inflation, 1
, ncol(data.inflation), as.numeric)
rownames(data.inflation) <- data.inflation[,1]
data.inflation <- data.inflation[ , -c(1, 14, 15, 16)]
inflation.base <- 240.853 # Current CPI as of 10/10/2016
data.inflation <- as.data.frame((data.inflation/inflation.base)^-1)
data.inflation <- as.numeric(as.character(
apply(data.inflation[85:104, ], 1, paste0)))
length(data.inflation) <- length(data.inflation) - 4
# ZILLOW
data.zillow <- readData(dir.data.zillow, "csv", "character")
data.zillow <- lapply(data.zillow, select, -c(8:16))
data.zillow <- lapply(data.zillow, function(df)
changeClass(df, 8, length(df), as.numeric))
data.zillow <- lapply(data.zillow, function(df)
cbind(df[1:7], as.data.frame(Map('*', df[8:243], data.inflation))))
ts.zillow <- lapply(data.zillow, function(df) as.data.frame(t(df[ , -c(1:7)])))
ts.zillow <- lapply(ts.zillow, function(df)
lapply(df, ts, start = c(1997, 1), c(2016, 7), frequency = 12))
ts.zillow <- Map(function(df.ts, df.data)
setNames(df.ts, df.data[["RegionName"]]), ts.zillow, data.zillow)
# Author: Sam Turner
# Script to process IPO, Zillow, and ZIP Geometry files for analysis
# IPO Data: https://finance.yahoo.com/
# Zillow Data: http://www.zillow.com/research/data/
# Inlfation Data: http://www.usinflationcalculator.com
# ZCTA Shapefiles: https://www.census.gov/geo/maps-data/data/cbf/cbf_zcta.html
# LIBRARIES
library(dplyr)
library(xlsx)
library(zipcode)
# FUNCTIONS
readData <- function(dir, ext, classes = NULL) {
# Reads in files and puts them in a list of dataframes
#
# Args:
#   dir: Directory where files are located
#   classes: Vector of classes to be used in read.csv colClasses arg
#
# Returns:
#   A list of dataframes containing the files in dir with the .csv extension
#   removed.
setwd(dir)
files <- list.files(pattern = paste0("*.", ext))
if(ext == "csv")
data <- lapply(files, read.csv, colClasses = classes)
if(ext == "xlsx") {
data <- lapply(files, read.xlsx2
, sheetIndex = 1
, colClasses = classes
, stringsAsFactors = FALSE)
}
names(data) <- gsub("\\..*", "", files)
return(data)
}
fixCurrency <- function(df, curCol) {
# Converts curCol to numeric from currency in format $*[M,B]
#
# Args:
#   df: dataframe containing a currency column
#   curCol: name of column with currency data
#
# Returns:
# A dataframe with curCol converted to numeric
temp <- df[[curCol]]
temp <- gsub("\\$", "", temp)
temp <- gsub("M", "e6", temp)
temp <- gsub("B", "e9", temp)
df[[curCol]] <- temp
df <- as.data.frame(df, stringsAsFactors = FALSE)
return(df)
}
changeClass <- function(df, first, last, classFun) {
# Changes class of cols in range first to last in df to class
# in function classFun
#
# Args:
#   df: dataframe to change classes
#   first: first column number to change
#   last: last column number to change
#   classFun: function that changes class (as.numeric, etc...)
#
# Returns:
# A dataframe with classes in range first to last changed by classFun
temp <- df[first:last]
temp <- lapply(temp, classFun)
temp <- as.data.frame(cbind(df[-c(first:last)], temp)
, stringsAsFactors = FALSE)
return(temp)
}
# SWITCHES
linux <- TRUE # for setting directories
export <- TRUE # for exporting data to csv
# DIRECTORIES
if(linux) {
dir.data.ipo <- "/mnt/common/work/PointDigFin/2/data/ipo"
dir.data.export <- "/mnt/common/work/PointDigFin/2/data/export"
dir.data.zillow <- "/mnt/common/work/PointDigFin/2/data/zillow"
dir.data.inflation <- "/mnt/common/work/PointDigFin/2/data/inflation"
} else {
dir.data.ipo <- "D:/work/PointDigFin/2/data/ipo"
dir.data.export <- "D:/work/PointDigFin/2/data/export"
dir.data.zillow <- "D:/work/PointDigFin/2/data/zillow"
dir.data.inflation <- "D:/work/PointDigFin/2/data/inflation"
}
# IPO
data.ipo <- readData(dir.data.ipo, "xlsx", "character")
data.ipo$AMEX_companylist[13:19] <- NULL # remove empty cols
data.ipo <- lapply(data.ipo, function(df)
lapply(df, function(x)gsub("n/a", NA, x)))
data.ipo <- lapply(data.ipo, fixCurrency, "MarketCap")
data.ipo <- lapply(data.ipo, transform, MarketCap = as.numeric(MarketCap))
data.ipo <- lapply(data.ipo, function(df)
transform(df, Zip = clean.zipcodes(df$Zip)))
data.ipo <- lapply(data.ipo, select, -Summary.Quote, -State, -City)
data(zipcode)
data.ipo <- lapply(data.ipo, merge, zipcode, by.x = "Zip", by.y = "zip")
data.ipo <- lapply(data.ipo, setNames, c('ZIP', 'Symbol', 'Name', 'LastSale'
, 'MarketCap', 'Year', 'Sector'
, 'Industry', 'Address', 'City'
, 'State', 'lat', 'lon'))
data.ipo <- lapply(data.ipo, select, Year, Symbol, Name, Sector, Industry
, LastSale, MarketCap, Address, City, State
, ZIP, lat, lon)
data.ipo <- lapply(data.ipo, subset, !is.na(MarketCap))
data.ipo <- bind_rows(data.ipo)
data.ipo <- transform(data.ipo, Year = as.numeric(Year))
data.ipo <- filter(data.ipo, Year >= 1998)
# MARKET CAP
data.marketCapTot <- data.ipo %>%
group_by(Year, ZIP) %>%
summarize(Total.MarketCap = sum(MarketCap)) %>%
arrange(ZIP, Year) %>%
as.data.frame
data.marketCapTot <- lapply(unique(data.marketCapTot$ZIP), function(z)
filter(data.marketCapTot, ZIP == z)) %>%
lapply(function(df)
setNames(cbind(df, cumsum(df$Total.MarketCap))
, c(names(df), "Cum.MarketCap")))
ts.marketCapTot <- lapply(data.marketCapTot, function(df) ts(start = df[1,1], frequency = 1, df[3:4]))
names(ts.marketCapTot) <- lapply(data.marketCapTot
, function(df)return(df$ZIP[1]))
data.marketCapTot <- bind_rows(data.marketCapTot)
# INFLATION
data.inflation <- as.data.frame(readData(dir.data.inflation
, "csv", "character"))
data.inflation <- changeClass(data.inflation, 1
, ncol(data.inflation), as.numeric)
rownames(data.inflation) <- data.inflation[,1]
data.inflation <- data.inflation[ , -c(1, 14, 15, 16)]
inflation.base <- 240.853 # Current CPI as of 10/10/2016
data.inflation <- as.data.frame((data.inflation/inflation.base)^-1)
data.inflation <- as.numeric(as.character(
apply(data.inflation[85:104, ], 1, paste0)))
length(data.inflation) <- length(data.inflation) - 4
# ZILLOW
data.zillow <- readData(dir.data.zillow, "csv", "character")
data.zillow <- lapply(data.zillow, select, -c(8:16))
data.zillow <- lapply(data.zillow, function(df)
changeClass(df, 8, length(df), as.numeric))
data.zillow <- lapply(data.zillow, function(df)
cbind(df[1:7], as.data.frame(Map('*', df[8:243], data.inflation))))
ts.zillow <- lapply(data.zillow, function(df) as.data.frame(t(df[ , -c(1:7)])))
ts.zillow <- lapply(ts.zillow, function(df)
lapply(df, ts, start = c(1997, 1), c(2016, 7), frequency = 12))
ts.zillow <- Map(function(df.ts, df.data)
setNames(df.ts, df.data[["RegionName"]]), ts.zillow, data.zillow)
